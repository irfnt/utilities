# TCL script to relocate ICG cell near sink using IC Compiler II native commands
# Corrected cell filtering and collection handling

##############################################
# Step 1: Identify ICG cells and target sinks
##############################################

# Get all clock gating cells using library attribute
set icg_lib_cells [get_lib_cells -filter "is_clock_gating_cell==true"]
if {[sizeof_collection $icg_lib_cells] == 0} {
    error "No clock gating cells found in library"
}

# Get all ICG instances in design using proper collection filtering
set icg_cells [get_cells -filter "lib_cell.ref_name == [get_attribute $icg_lib_cells full_name]"]

# Alternative method using collection membership
# set icg_cells [filter_collection [get_cells *] "lib_cell in $icg_lib_cells"]

if {[sizeof_collection $icg_cells] == 0} {
    error "No ICG cells found in current design"
}

##############################################
# Step 2: Find driven sinks for first ICG cell
##############################################

set first_icg [index_collection $icg_cells 0]
set icg_name [get_attribute $first_icg full_name]

# Get clock output pin of ICG
set icg_out_pin [get_pins -of $first_icg -filter "direction==out"]
if {[sizeof_collection $icg_out_pin] == 0} {
    error "No output pin found on ICG cell $icg_name"
}

# Find sinks driven by this ICG
set driven_sinks [filter_collection \
    [all_fanout -from $icg_out_pin -endpoints_only] \
    "object_class==cell && is_sequential==true"
]

if {[sizeof_collection $driven_sinks] == 0} {
    error "No sequential sinks found for ICG cell $icg_name"
}

set target_sink [index_collection $driven_sinks 0]
set sink_name [get_attribute $target_sink full_name]

##############################################
# Step 3: Placement optimization (unchanged)
##############################################

# Get sink coordinates
set sink_loc [get_attribute [get_cells $sink_name] origin]
set sink_x [lindex $sink_loc 0]
set sink_y [lindex $sink_loc 1]

# Create placement boundary (10um x 10um)
set boundary [list \
    [expr $sink_x - 5] \
    [expr $sink_y - 5] \
    [expr $sink_x + 5] \
    [expr $sink_y + 5] \
]

# Apply exclusive boundary
create_bounds -name ICG_BOUND -type exclusive -coordinates $boundary $icg_name

# Run focused placement optimization
place_opt -incremental -effort high -optimize_dft

# Legalize placement
legalize_placement -cells $icg_name

##############################################
# Step 4: Verification and reporting
##############################################

# Post-placement validation
set new_loc [get_attribute [get_cells $icg_name] origin]
puts "ICG placement results:"
puts "Initial location: [get_attribute [get_cells $icg_name] original_origin]"
puts "Optimized location: $new_loc"

# Timing validation
report_timing -from $icg_name -to $sink_name \
    -delay_type max \
    -max_paths 3 \
    -nets \
    -input_pins \
    -file icg_placement_timing.rpt

# Save design state
save_mw_cel -as "icg_optimized_design"

puts "ICG placement completed successfully"
puts "Timing report: icg_placement_timing.rpt"
puts "Optimized design saved as: icg_optimized_design"